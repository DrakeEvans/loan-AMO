/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { SpaceCoinRouter, SpaceCoinRouterInterface } from "../SpaceCoinRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_spaceCoinAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spaceCoinEthPairAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountDesiredSpaceCoin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountDesiredEth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountSpaceCoin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountEth",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountSpaceCoin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountEth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minAmountSpaceCoin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minAmountEth",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountSpaceCoin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountEth",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spaceCoinAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spaceCoinEthPairAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class SpaceCoinRouter__factory {
  static readonly abi = _abi;
  static createInterface(): SpaceCoinRouterInterface {
    return new utils.Interface(_abi) as SpaceCoinRouterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SpaceCoinRouter {
    return new Contract(address, _abi, signerOrProvider) as SpaceCoinRouter;
  }
}
