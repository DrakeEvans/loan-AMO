/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SpaceCoinIcoInterface extends ethers.utils.Interface {
  functions: {
    "addressesContributed(uint256)": FunctionFragment;
    "amountContributedByAddress(address)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "movePhaseForward()": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseSpaceCoin()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "spaceCoinAddress()": FunctionFragment;
    "totalContributions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateWhitelist(address[],bool)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addressesContributed", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "amountContributedByAddress", values: [string]): string;
  encodeFunctionData(functionFragment: "currentPhase", values?: undefined): string;
  encodeFunctionData(functionFragment: "movePhaseForward", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "purchaseSpaceCoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "spaceCoinAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalContributions", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "updateWhitelist", values: [string[], boolean]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(functionFragment: "addressesContributed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amountContributedByAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentPhase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "movePhaseForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchaseSpaceCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spaceCoinAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalContributions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateWhitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export class SpaceCoinIco extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SpaceCoinIcoInterface;

  functions: {
    addressesContributed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    amountContributedByAddress(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPhase(overrides?: CallOverrides): Promise<[number]>;

    movePhaseForward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseSpaceCoin(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<[string]>;

    totalContributions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateWhitelist(
      _addresses: string[],
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  addressesContributed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  amountContributedByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<number>;

  movePhaseForward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseSpaceCoin(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  spaceCoinAddress(overrides?: CallOverrides): Promise<string>;

  totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateWhitelist(
    _addresses: string[],
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    addressesContributed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    amountContributedByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<number>;

    movePhaseForward(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseSpaceCoin(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<string>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateWhitelist(_addresses: string[], _bool: boolean, overrides?: CallOverrides): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;
  };

  estimateGas: {
    addressesContributed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    amountContributedByAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    movePhaseForward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseSpaceCoin(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateWhitelist(
      _addresses: string[],
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressesContributed(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountContributedByAddress(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    movePhaseForward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseSpaceCoin(
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    spaceCoinAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalContributions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateWhitelist(
      _addresses: string[],
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
